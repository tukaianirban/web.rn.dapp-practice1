Vite (vitejs.dev) is a tooling service that helps to create, init React faster and leaner.
To load environment variables, create a .env file inside the root folder of the client.
Add a .env file and add in the value as <key>=<value>

Tailwind is a utility-first CSS framework with prebuilt classes that are used to build webpages.
Simply put, you do not need to create css class; they are all built in.
After init, get your configurations in place with the configs under: https://tailwindcss.com/docs/guides/create-react-app
If you need to understand any property used, just search for the string in the tailwind docs.
If some component is missing out in tailwind, install it this way: # npm install -D @tailwindcss/forms 



In this project we use npm install for installing new packages, and yarn for adding and removing packages 
(already installed in node_modules/) to our repo (yarn.lock).
Alternatively, use ' npm add <package name> ' for adding the package into package-lock.json

HardHat
=======
Ethereum development platform, complete with testing tools, running nodes, etc.
It also enables running SOlidity locally on the machine.

Create custom CSS classes at csshero.org


Install smart contract dependencies:
# npm install --save-dev hardhat @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers




Getting started with the smart contract project:
================================================
# npx hardhat -> initializes the project with tests/, contracts/, hardhat.config.js files.

to Validate whether the installation / initialisation was done right or not, run the base (example) tests:
# npx hardhat test

The Solidity extension for VS Code provides code highlighting and makes it easier to write.

In the hardhat config, the accounts config of ropsten literally takes in the private key of the account 
that will fund the dpeloyment of the contract. EXTREMELY DANGEROUS !!!

To deploy the contract on a network:
# npx hardhat run scripts/deploy.js --network goerli

When the smart contract is deployed, a few things are known:
- the blockchain address where the contract was deployed
- the ABI (Application Binary Interface) " smart_contract/artifacts/contracts/<contractname>.json " is generated.
    -> the standard API through which to communicate with a contract both from outside of the blockchain and also 
    for contract-to-contract communication.

For the client to be able to use the ABI, copy the ABI file to under client/src/<>
